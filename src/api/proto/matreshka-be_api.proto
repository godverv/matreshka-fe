syntax = "proto3";

package matreshka_be_api;

import "google/api/annotations.proto";

option go_package = "/matreshka_api";

service MatreshkaBeAPI {
  rpc ApiVersion(ApiVersion.Request) returns (ApiVersion.Response) {
    option (google.api.http) = {
      get: "/version"
    };
  };

  rpc UpsertConfig(PatchConfig.Request) returns (PatchConfig.Response) {
    option(google.api.http) = {
      post: "/config",
      body: "*"
    };
  }
  rpc GetConfig(GetConfig.Request) returns (GetConfig.Response) {
    option (google.api.http) = {
      get: "/config/{service_name}",
    };
  }

  rpc GetConfigRaw(GetConfigRaw.Request) returns (GetConfigRaw.Response) {
    option (google.api.http) = {
      get: "/config/raw/{service_name}",
    };
  }
  rpc PatchConfigRaw(PatchConfigRaw.Request) returns (PatchConfigRaw.Response) {
    option (google.api.http) = {
      patch: "/config/raw/{service_name}",
      body: "*"
    };
  }

  rpc ListConfigs(ListConfigs.Request) returns (ListConfigs.Response) {
    option (google.api.http) = {
      post: "/config/list",
      body: "*"
    };
  }
}

message Resource {
  message Unknown {
    map<string, string> environment = 1;
  }

  message Postgres {
    string host = 1;
    uint32 port = 2;
    string db_name = 3;
    string user_name = 4;
    string pwd = 5;
  }

  message Redis {
    string host = 1;
    uint32 port = 2;

    string user = 3;
    string pwd = 4;
    int32 db = 5;
  }

  message Sqlite {
    string path = 1;
  }

  message Grpc {
    string connection_string = 1;
    string module = 2;
  }

  message Telegram {
    string api_key = 1;
  }

  message Connection {
    string connection_string = 1;
  }

  enum Type {
    UnknownResourceType = 0;
    PostgresResourceType = 1;
    RedisResourceType = 2;
    SqliteResourceType = 3;
    GrpcResourceType = 4;
    TelegramResourceType = 5;
  }

  message Config {
    oneof resource {
      Unknown unknown = 4;
      Postgres postgres = 5;
      Redis redis = 6;
      Sqlite sqlite = 7;
      Grpc grpc = 8;
      Telegram telegram = 9;
    }
  }

  Connection conn = 1;
  string name = 2;
  Type resource_type = 3;
  Config resource_config = 4;
}
message Server {
  message Unknown {
    map<string, string> environment = 1;
  }

  message Grpc {
    uint32 port = 1;
  }

  message Rest {
    uint32 port = 1;
  }

  message Config {
    oneof server {
      Unknown unknown = 3;
      Grpc grpc = 4;
      Rest rest = 5;
    }
  }

  enum Type {
    UnknownServerType = 0;
    GrpcServerType = 1;
    RestServerType = 2;
  }

  string swagger_link = 1;

  string makosh_name = 2;

  Config config = 3;
  Type type = 4;
}
message Config {
  message AppConfig {
    string name = 1;
    string version = 2;
    uint32 startup_duration_sec = 3;
  }

  AppConfig app_config = 1;

  repeated Resource resources = 2;

  repeated Server servers = 3;

  map<string, string> environment = 4;
}

message ApiVersion {
  message Request {}
  message Response {
    string version = 1;
  }
}

message PatchConfig {
  message Request {
    // TODO подумать
    Config config = 1;
  }

  message Response {}
}
message GetConfig {
  message Request {
    string service_name = 1;
  }

  message Response {
    Config config = 1;
  }
}

message GetConfigRaw {
  message Request {
    string service_name = 1;
  }

  message Response {
    bytes config = 1;
  }
}
message PatchConfigRaw {
  message Request {
    bytes raw = 1;
    string service_name = 2;
  }

  message Response {

  }

}

message ListRequest {
  uint32 limit = 1;
  uint32 offset = 2;
}
message ListConfigs {
  message Request {
    ListRequest listRequest = 1;
    string serviceName = 2;
  }

  message Response {
    repeated Config.AppConfig services = 1;
  }
}